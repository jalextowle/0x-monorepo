public {{this.tsName}} = {
    async callAsync(
    {{> typed_params inputs=inputs}}
        callData: Partial<CallData> = {},
        defaultBlock?: BlockParam,
    ): Promise<{{> return_type outputs=outputs}}> {
        const self = this as any as {{contractName}}Contract;
        const encodedData = self._strictEncodeArguments('{{this.functionSignature}}', [{{> params inputs=inputs}}]);
        const encodedDataBuf = Buffer.from(encodedData.substr(2), 'hex');
        const rawCallResultBuf = await self._evmExecAsync(encodedDataBuf);
        const rawCallResult = `0x${rawCallResultBuf.toString('hex')}`;
        BaseContract._throwIfRevertWithReasonCallResult(rawCallResult);
        const abiEncoder = self._lookupAbiEncoder('{{this.functionSignature}}');
        // tslint:disable boolean-naming
        const result = abiEncoder.strictDecodeReturnValue<{{> return_type outputs=outputs}}>(rawCallResult);
        // tslint:enable boolean-naming
        return result;
    }
};
